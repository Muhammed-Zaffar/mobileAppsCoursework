package com.example.myapplication.data

import android.content.*
import android.database.Cursor
import android.net.Uri
import androidx.lifecycle.LiveData

class FuellingEventContentProvider : ContentProvider() {

    // TODO: Initialize your database helper or repository here
    private lateinit var dbHelper: FuellingEventDAO
    companion object {
        private const val EVENTS = 100
        private const val EVENT_ID = 101

        private val uriMatcher = UriMatcher(UriMatcher.NO_MATCH).apply {
            addURI("com.example.myapplication.fuellingeventprovider", "events", EVENTS)
            addURI("com.example.myapplication.fuellingeventprovider", "events/#", EVENT_ID)
        }
    }

    override fun onCreate(): Boolean {
        // Initialize your data access objects here
        dbHelper = FuellingEventDatabase.getDatabase(context!!).fuellingEventDAO()
        return true
    }

    override fun query(
        uri: Uri,
        projection: Array<String>?,
        selection: String?,
        selectionArgs: Array<String>?,
        sortOrder: String?
    ): Cursor {
        val cursor: Cursor = when (uriMatcher.match(uri)) {
            EVENTS -> {
                // Handle logic to query all events, perhaps sorting them by date or another criteria
                dbHelper.getAllFuellingEventsCursor()
            }
            EVENT_ID -> {
                // Extract the ID from the URI and modify the selection criteria to match this ID
                val id = ContentUris.parseId(uri)
                dbHelper.getFuellingEventByIDCursor(id.toInt())
            }
            else -> throw IllegalArgumentException("Unknown URI: $uri")
        }
        cursor.setNotificationUri(context?.contentResolver, uri)
        return cursor
    }


    override fun insert(uri: Uri, values: ContentValues?): Uri? {
        throw UnsupportedOperationException("Insert not supported")
    }


    override fun update(
        uri: Uri,
        values: ContentValues?,
        selection: String?,
        selectionArgs: Array<String>?
    ): Int {
        throw UnsupportedOperationException("Update not supported")
    }

    override fun delete(
        uri: Uri,
        selection: String?,
        selectionArgs: Array<String>?
    ): Int {
        throw UnsupportedOperationException("Delete not supported")
    }

    /**
     * Returns the MIME type of the data at the given URI.
     * @param uri The URI to query.
     * @return The MIME type of the data at the given URI.
     * @throws IllegalArgumentException if the URI is not recognized.
     * Q: what is this function for? A: This function is used to return the MIME type of the data at the given URI.
     * Q: what is the MIME type? A: MIME type is a standard way to describe the format of a file. It stands for Multipurpose Internet Mail Extensions.
     *
     * function generated by Copilot
     */
    override fun getType(uri: Uri): String {
        // Define the MIME type for each type of URI you support
        // Q: what is this function for? A: This function is used to return the MIME type of the data at the given URI.
        // Q: what is the MIME type? A: MIME type is a standard way to describe the format of a file. It stands for Multipurpose Internet Mail Extensions.
        return when (uriMatcher.match(uri)) {
            EVENTS -> "vnd.android.cursor.dir/vnd.com.example.myapplication.fuellingeventprovider.events"
            EVENT_ID -> "vnd.android.cursor.item/vnd.com.example.myapplication.fuellingeventprovider.events"
            else -> throw IllegalArgumentException("Unknown URI: $uri")
        }
    }
}

